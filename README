A Simple Planning System

Overview
--------

The planning system is designed to facilitate the planning of both
complex large projects, as well as keep track of the simplest atomic
tasks in those projects. To support this functionality, the planner is
a heirarchical system, with all the advanced functionality derived
from a basic datastructure.  Most importantly, the planner must be
simple to use. That is, entering a tasks must be as simple as entering
a single line describing the task and then pressing enter.

The central component of the planner is the Task, which represents
something that must be done. This can be a very large task, such as
'build a product', to a simple task like 'change font size of the
subtitles in the tutorial screen'. Tasks can be divided into subtasks,
each containing a part of the work that is required to complete the
parent task. Subtasks are tasks themselves, and as such can be divided
into subtasks again.

A tasks if finished if all subtasks are completed, or, if the task does
not have any subtasks, when itself is completed.

A tasks can be also be dependent on one or more other tasks, which
signifies that those other tasks must be completed before this task
can be started. It is not possible to create a circular reference in
this way. A dependency does not limit any functionality, as there is
no explicit meaning of 'starting' a task. This might be added later,
but for now it is only used to be able to plot critical paths etc.

Tasks have various other properties, such as a person/assignee for
that task, a status that can contain custom information about the
task, and an estimated length/duration for the task. The different
statuses of a task are user-configurable. Whether a task is complete
or not is not a status, but a separate field in the task, due to its
special meaning in the task heirarchy.

The second component of the planner are contexts. Every task has a
context. A context relates to the persons or entities that are
involved with the tasks, for example the engineering group of a
company. Contexts are used to group tasks when it is not appropriate
to group the tasks through a single parent task, as a context is not
something that has to be done. For example, a context could be the
engineering division in a company, so it is easy to retrieve all
engineering tasks. Contexts can also be heirarchical, so the
engineering division could be a subcontext of the company. A similar
system could be created with tags, but tag management is complicated,
and forcing a context on task automatically categorizes them and
allows for powerful querying.

Communication between team members about a task is handled through
comments on the task, which is a linear thread of messages.


Implementation
--------------

The first implementation will be done on Google App Engine, a flexible
cloud based web-app development platform. The user interface will also
be done in HTML, but the goal is to solely use a JSON api to interface
with the planner, both for the HTML client as well as any other
potential clients. This API separates the client and server and should
allow for enough flexibility.
